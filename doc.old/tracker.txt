make questions and candidates editable by their creator

clarify that you can drill down into questions (rank, details, add answers)
limit the number of candidates to 5 with a "more" link
when there are no questions, "raise a question" should be open

users can create their own organizations
users can navigate to organizations they are a member of
users can invite other users to their organizations and choose their rights

cleanup css
minify and cache javascript in production
secure the ranking api against unauthorized writes
write a deploy script

--- alpha release

release: private organizations

clean up subscriptions on candidate ranking relation?

implement auto code reloading for the server-side code in development

rename table.globalName to name
make Server.fetch take varargs as well as arrays
convenient underscore based view builder syntax
add _ to the closure surrounding every monarch file
deal with union spec
enforce that unions and projections have at least one primary key before activating them for events (to warn about the shortcomings of current event system)
add a limit operator to the server side and use it for Relation#first
support for anonymous modules in foundation.js
when a constructor is declared with the same name as an extant module, extend the constructor with the module
projections that remove all primary keys should add a distinct keyword
it should not be possible to reference an attribute or table in a projection that is not exposed by the underlying relation (like if it's projected away)
disallow updates to columns not exposed in a projection
why does Tuple#define_field_reader restrict definition of ? methods to concrete (not synthetic) columns?
convert screw unit to use underscore.js _.isEqual for equal matcher?
make relations work with beEmpty matcher, possibly by tying into or creating some general underscore facility for determining emptyness
add the suite keyword to screw unit so that actionitems and monarch spec suites can be run together on a single page


longer term
-----------
release foundation.js
document and release screw unit

deferred issues / open questions
---------------
should Record#update allow id to be assigned?
when an update is performed on a relation, records in the identity map can become stale. should I implement relation#reload for relations that have records (not just tuples), which reloads any records in the id map? could be expensive. may want to implement in memory?
checking for the existence of the session every single request? shouldn't that at least cache it in the identity map?
should exposed repository be in the http package, so nothing in model is dependent on http?
what to do if creating an object fails with an error? call error callback? should the element be in the local repository
